apply plugin: 'war'
apply plugin: 'org.gretty'

test {
    exclude '**/*IT*'
}

task restAssuredTest(type: Test) {
    outputs.upToDateWhen { false }
    systemProperty "integration.tests.baseUrl", System.properties['baseUrl'] ?: "http://localhost:8080/"
    systemProperty "integration.tests.actuatorUrl", System.properties['actuatorUrl'] ?: "http://localhost:8180/"
    include '**/*IT*'
}

war.dependsOn createVersionPropertyFile

gretty {
    def instance = System.properties['instance'] ?: '0'
    def useHttpPort = 8080 + (instance as Integer)
    def useInternalHttpPort = 8180 + (instance as Integer)
    def applicationDir = "${rootProject.projectDir}/devops/dev"


    servletContainer = 'tomcat9'
    contextPath = '/inera-certificate'

    integrationTestTask = null
    scanInterval = 0
    debugPort = 8880 + (instance as Integer)
    portPropertiesFileName = "gretty_ports_${instance}.properties"
    debugSuspend = false
    serverConfigFile = "tomcat-gretty.xml"

    jvmArgs = [
            "-Dcatalina.base=${buildDir}/catalina.base",
            "-Dspring.profiles.active=dev,bootstrap,testability-api,caching-enabled,it-fk-stub,wc-hsa-stub",
            "-Dlogback.file=${applicationDir}/config/logback-dev.xml",
            "-Djava.awt.headless=true",
            "-Dfile.encoding=UTF-8",
            "-Dapplication.dir=${applicationDir}",
            "-Drecipient.config.file=${applicationDir}/config/recipients-dev.json",
            "-Ddev.config.file=${applicationDir}/config/application-dev.properties",
            "-Xmx512M",
            "-Ddev.http.port=${useHttpPort}",
            "-Ddev.http.port.internal=${useInternalHttpPort}"
    ]
}

dependencies {
    compile project(':intygstjanst-persistence')
    compile "se.inera.intyg.clinicalprocess.healthcond.certificate:intyg-clinicalprocess-healthcond-certificate-schemas:${intygClinicalprocessSchemasVersion}"
    compile "se.inera.intyg.clinicalprocess.healthcond.rehabilitation:intyg-clinicalprocess-healthcond-rehabilitation-schemas:${intygHealthcondRehabilitationSchemasVersion}"
    compile "se.riv.itintegration.monitoring:itintegration-monitoring-schemas:${rivtaItintegrationMonitoringSchemasVersion}"

    compile "se.inera.intyg.schemas:schemas-contract:${schemasContractVersion}"
    compile "se.inera.intyg.infra:hsa-integration:${infraVersion}"
    compile "se.inera.intyg.infra:pu-integration:${infraVersion}"
    compile "se.inera.intyg.infra:sjukfall-engine:${infraVersion}"
    compile "se.inera.intyg.infra:monitoring:${infraVersion}"
    compile "se.inera.intyg.infra:security-filter:${infraVersion}"
    compile "se.inera.intyg.infra:intyginfo:${infraVersion}"
    compile "se.inera.intyg.infra:testcertificate:${infraVersion}"
    compile "se.inera.intyg.infra:message:${infraVersion}"
    compile "se.inera.intyg.infra:certificate:${infraVersion}"

    compile "se.inera.intyg.common:common-support:${commonVersion}"
    compile "se.inera.intyg.common:integration-util:${commonVersion}"
    compile "se.inera.intyg.common:common-schemas:${commonVersion}"
    compile "se.inera.intyg.common:fk7263:${commonVersion}"
    compile "se.inera.intyg.common:ts-bas:${commonVersion}"
    compile "se.inera.intyg.common:ts-diabetes:${commonVersion}"
    compile "se.inera.intyg.common:tstrk1009:${commonVersion}"
    compile "se.inera.intyg.common:tstrk1062:${commonVersion}"
    compile "se.inera.intyg.common:luse:${commonVersion}"
    compile "se.inera.intyg.common:lisjp:${commonVersion}"
    compile "se.inera.intyg.common:luae_fs:${commonVersion}"
    compile "se.inera.intyg.common:luae_na:${commonVersion}"
    compile "se.inera.intyg.common:db:${commonVersion}"
    compile "se.inera.intyg.common:doi:${commonVersion}"
    compile "se.inera.intyg.common:af00213:${commonVersion}"
    compile "se.inera.intyg.common:af00251:${commonVersion}"
    compile "se.inera.intyg.common:ag114:${commonVersion}"
    compile "se.inera.intyg.common:ag7804:${commonVersion}"


    compile "com.sun.activation:javax.activation:${javaxActivationVersion}"

    compile "org.apache.activemq:activemq-spring"
    compile "org.apache.cxf:cxf-rt-features-logging:${cxfVersion}"
    compile "org.springframework:spring-jms"
    compile "org.springframework:spring-webmvc"
    compile "mysql:mysql-connector-java"

    compileOnly "org.apache.geronimo.specs:geronimo-jms_1.1_spec:${geronimoJmsVersion}"
    compileOnly "javax.servlet:javax.servlet-api"

    testCompile "org.assertj:assertj-core"
    testCompile "org.springframework:spring-test"
    testCompile "org.xmlunit:xmlunit-legacy"

    testCompile "io.rest-assured:rest-assured"
    testCompile "io.rest-assured:json-schema-validator"
    testCompile "com.sun.xml.bind:jaxb-osgi:2.3.2" // Can remove when rest-assured in BOM > version 4.0

    testCompile "org.hamcrest:hamcrest-library"
    testCompile "org.antlr:ST4:${stAntlr4Version}"
    testCompile "org.apache.geronimo.specs:geronimo-jms_1.1_spec:${geronimoJmsVersion}"

    // We explicitly declare this as a testRuntime dependency so Restassured tests loads the correct XSD for
    // SetCertificateStatusResponder_1.0.xsd (as it exists in two different schemas)
    testRuntime "se.riv.clinicalprocess.healthcond.certificate:clinicalprocess-healthcond-certificate-schemas:${rivtaClinicalprocessSchemasVersion}"
    testRuntime "javax.servlet:javax.servlet-api"

    gretty "se.inera.intyg.refdata:refdata:${refDataVersion}"
}
