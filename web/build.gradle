description = 'Intygstj√§nsten (Web)'

apply plugin: 'war'
apply plugin: 'org.akhikhl.gretty'

test {
    exclude '**/*IT*'
}

task restAssuredTest(type: Test) {
    outputs.upToDateWhen { false }
    systemProperty "integration.tests.baseUrl", System.properties['baseUrl'] ?: "http://localhost:8080/"
    include '**/*IT*'
}

gretty {
    integrationTestTask = null
    contextPath = '/inera-certificate'
    contextConfigFile = file("src/main/webapp/WEB-INF/jetty-web.xml")
    scanInterval = 0

    jvmArgs = [
        "-Dcatalina.base=${buildDir}/catalina.base",
        "-Dspring.profiles.active=dev,caching-enabled",
        "-Drecipient.config.file=${projectDir}/recipient-dev.properties",
        "-Dcredentials.file=${projectDir}/certificate-credentials.properties",
        "-Dcertificate.logback.file=${projectDir}/certificate-logback.xml",
        "-Dcertificate.config.file=${projectDir}/certificate-dev.properties"
        ]
}

war.dependsOn createVersionPropertyFile

dependencies {
    compile project(':intygstjanst-persistence')

    compile "se.inera.intyg.insuranceprocess.healthreporting:intyg-insuranceprocess-healthreporting-schemas:${intygInsuranceprocessSchemasVersion}"
    compile "se.riv.clinicalprocess.healthcond.certificate:clinicalprocess-healthcond-certificate-schemas:${rivtaClinicalprocessSchemasVersion}"

    compile "se.inera.intyg.common:hsa-integration:${commonVersion}"

    compile "se.inera.intyg.intygstyper:ts-bas:${typerVersion}"
    compile "se.inera.intyg.intygstyper:ts-diabetes:${typerVersion}"
    compile "se.inera.intyg.intygstyper:ts-parent:${typerVersion}"
    compile "se.inera.intyg.intygstyper:fk-parent:${typerVersion}"
    compile "se.inera.intyg.intygstyper:luse:${typerVersion}"
    compile "se.inera.intyg.intygstyper:lisjp:${typerVersion}"
    compile "se.inera.intyg.intygstyper:luae_fs:${typerVersion}"
    compile "se.inera.intyg.intygstyper:luae_na:${typerVersion}"
    compile "se.inera.intyg.intygstyper:fk7263:${typerVersion}"

    compile "commons-io:commons-io:${commonsIoVersion}"
    compile "org.springframework:spring-jms:${springVersion}"
    compile 'se.riv.infrastructure.directory.organization:infrastructure-directory-organization-schemas:${rivtaDirectoryOrganizationSchemasVersion}'
    compile "se.riv.itintegration.monitoring:itintegration-monitoring-schemas:${rivtaItintegrationMonitoringSchemasVersion}"
    compile "se.inera.intyg.clinicalprocess.healthcond.rehabilitation:intyg-clinicalprocess-healthcond-rehabilitation-schemas:${intygHealthcondRehabilitationSchemasVersion}"
    compile "org.springframework:spring-webmvc:${springVersion}"

    compileOnly "org.apache.geronimo.specs:geronimo-jms_1.1_spec:${geronimoJmsVersion}"
    compileOnly "javax.servlet:servlet-api:${javaxServletApiVersion}"

    testCompile "org.springframework:spring-test:${springVersion}"
    testCompile "xmlunit:xmlunit:${xmlUnitVersion}"
    testCompile "com.jayway.restassured:rest-assured:${restassuredVersion}"
    testCompile "com.jayway.restassured:json-schema-validator:${jsonSchemaValidatorVersion}"
    testCompile "org.antlr:ST4:${stAntlr4Version}"
    testCompile "org.apache.geronimo.specs:geronimo-jms_1.1_spec:${geronimoJmsVersion}"

    testRuntime "javax.servlet:servlet-api:${javaxServletApiVersion}"

    gretty "org.apache.activemq:activemq-client:${activeMqVersion}"
    gretty "org.apache.activemq:activemq-broker:${activeMqVersion}"
    gretty "com.h2database:h2:${h2Version}"
    gretty "mysql:mysql-connector-java:${mysqlVersion}"
}
