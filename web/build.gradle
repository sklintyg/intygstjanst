apply plugin: 'war'
apply plugin: 'org.gretty'

test {
    exclude '**/*IT*'
}

task restAssuredTest(type: Test) {
    outputs.upToDateWhen { false }
    systemProperty "integration.tests.baseUrl", System.properties['baseUrl'] ?: "http://localhost:8080/"
    include '**/*IT*'
}

task zipResources(type: ArchiveDirectoryTask) {
    sourcePath "../src/main/resources"
    include "*"
    include "*/*" //to include contents of a folder present inside from directory
    archiveName "resources.zip"
    destinationDir(file("../devops/openshift/test/env"))
    archiveOnlyIfDiff file("${destinationDir}/${archiveName}").exists()
}

build.dependsOn zipResources
war.dependsOn createVersionPropertyFile

gretty {
    servletContainer = 'jetty9'
    
    def springProfiles = 'dev,embedded,testability-api,caching-enabled,it-fk-stub,wc-hsa-stub'
    contextPath = '/inera-certificate'
    contextConfigFile = file("src/main/webapp/WEB-INF/jetty-web.xml")
    integrationTestTask = null
    scanInterval = 0
    debugPort = 5005
    debugSuspend = false

    jvmArgs = [
            "-Dresources.folder=classpath:",
            "-Dlogback.file=classpath:logback-ocp.xml",
            "-Dspring.profiles.active=" + springProfiles,
            "-Dcatalina.base=${buildDir}/catalina.base",
            "-Drecipient.config.file=${projectDir}/recipients-dev.json",
            "-Dcredentials.file=${projectDir}/certificate-credentials.properties",
            "-Dconfig.file=${projectDir}/certificate-dev.properties",
            "-Xmx512M"
    ]
}

dependencies {
    compile project(':intygstjanst-persistence')
    compile "se.inera.intyg.clinicalprocess.healthcond.certificate:intyg-clinicalprocess-healthcond-certificate-schemas:${intygClinicalprocessSchemasVersion}"
    compile "se.inera.intyg.clinicalprocess.healthcond.rehabilitation:intyg-clinicalprocess-healthcond-rehabilitation-schemas:${intygHealthcondRehabilitationSchemasVersion}"
    compile "se.riv.itintegration.monitoring:itintegration-monitoring-schemas:${rivtaItintegrationMonitoringSchemasVersion}"

    compile "se.inera.intyg.schemas:schemas-contract:${schemasContractVersion}"
    compile "se.inera.intyg.infra:hsa-integration:${infraVersion}"
    compile "se.inera.intyg.infra:sjukfall-engine:${infraVersion}"
    compile "se.inera.intyg.infra:monitoring:${infraVersion}"

    compile "se.inera.intyg.common:common-support:${commonVersion}"
    compile "se.inera.intyg.common:integration-util:${commonVersion}"
    compile "se.inera.intyg.common:common-schemas:${commonVersion}"
    compile "se.inera.intyg.common:fk7263:${commonVersion}"
    compile "se.inera.intyg.common:ts-bas:${commonVersion}"
    compile "se.inera.intyg.common:ts-diabetes:${commonVersion}"
    compile "se.inera.intyg.common:tstrk1009:${commonVersion}"
    compile "se.inera.intyg.common:luse:${commonVersion}"
    compile "se.inera.intyg.common:lisjp:${commonVersion}"
    compile "se.inera.intyg.common:luae_fs:${commonVersion}"
    compile "se.inera.intyg.common:luae_na:${commonVersion}"
    compile "se.inera.intyg.common:db:${commonVersion}"
    compile "se.inera.intyg.common:doi:${commonVersion}"
    compile "se.inera.intyg.common:af00213:${commonVersion}"
    compile "se.inera.intyg.common:af00251:${commonVersion}"
    compile "se.inera.intyg.common:ag114:${commonVersion}"
    compile "se.inera.intyg.common:ag7804:${commonVersion}"


    compile "org.apache.activemq:activemq-spring:${activeMqVersion}"
    compile "org.springframework:spring-jms:${springVersion}"
    compile "org.springframework:spring-webmvc:${springVersion}"
    compile "mysql:mysql-connector-java:${mysqlVersion}"

    compileOnly "org.apache.geronimo.specs:geronimo-jms_1.1_spec:${geronimoJmsVersion}"
    compileOnly "javax.servlet:servlet-api:${servletApiVersion}"

    testCompile "org.assertj:assertj-core:${assertjVersion}"
    testCompile "org.springframework:spring-test:${springVersion}"
    testCompile "xmlunit:xmlunit:${xmlUnitVersion}"
    testCompile "com.jayway.restassured:rest-assured:${restassuredVersion}"
    testCompile "com.jayway.restassured:json-schema-validator:${jsonSchemaValidatorVersion}"
    testCompile "org.antlr:ST4:${stAntlr4Version}"
    testCompile "org.apache.geronimo.specs:geronimo-jms_1.1_spec:${geronimoJmsVersion}"

    // We explicitly declare this as a testRuntime dependency so Restassured tests loads the correct XSD for
    // SetCertificateStatusResponder_1.0.xsd (as it exists in two different schemas)
    testRuntime "se.riv.clinicalprocess.healthcond.certificate:clinicalprocess-healthcond-certificate-schemas:${rivtaClinicalprocessSchemasVersion}"
    testRuntime "javax.servlet:servlet-api:${servletApiVersion}"

    gretty "se.inera.intyg.refdata:refdata:${refDataVersion}"
}
