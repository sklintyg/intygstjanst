plugins {
    id "se.inera.intyg.plugin.common" version "3.2.10-SNAPSHOT" apply false
    id "io.spring.dependency-management" version "1.1.3" apply false
    id "org.gretty" version "3.1.1" apply false
    id 'test-report-aggregation'
}

ext {
    commonVersion = System.properties['commonVersion'] ?: '3.20.0-SNAPSHOT'
    infraVersion = System.properties['infraVersion'] ?: '3.20.0-SNAPSHOT'
    refDataVersion = System.properties['refDataVersion'] ?: '1.0-SNAPSHOT'

    intygHealthcondRehabilitationSchemasVersion = "1.1.3.1"
    intygClinicalprocessSchemasVersion = "1.0.24.1"
    rivtaClinicalprocessSchemasVersion = "4.0.5.2"
    rivtaGetPersonsPersonSchemasVersion = "3.1.1.1"
    rivtaInsuranceprocessSchemasVersion = "3.1.0.5.1"
    rivtaItintegrationMonitoringSchemasVersion = "1.0.0.5.1"
    schemasContractVersion = "2.1.8.1"

    commonsIoVersion = "2.14.0"
    cxfVersion = "3.6.2"
    geronimoJmsVersion = "1.1.1"
    guavaVersion = "32.1.3-jre"
    jadiraUserTypeVersion = "6.0.1.GA"
    jakartaJwsApiVersion = "3.0.0"
    javaxJwsApiVersion = "1.1"
    jaxb2Version = "0.13.1"
    picocliVersion = "4.7.5"
    stAntlr4Version = "4.3.4"
    shedlockSpringVersion = "4.46.0"

    springbootMavenBomVersion = "2.7.17"
}

allprojects {
    apply plugin: 'se.inera.intyg.plugin.common'
    apply plugin: "io.spring.dependency-management"
    apply plugin: 'maven-publish'
    apply plugin: 'java'

    group = 'se.inera.intyg.intygstjanst'
    version = System.properties['buildVersion'] ?: '0.0-SNAPSHOT'
    sourceCompatibility = 11
    targetCompatibility = 11

    dependencyManagement {
        imports {
            mavenBom "org.springframework.boot:spring-boot-dependencies:${springbootMavenBomVersion}"
        }
    }

    dependencies {
        implementation "javax.annotation:javax.annotation-api"
        implementation "javax.jws:javax.jws-api:${javaxJwsApiVersion}"
        implementation "jakarta.xml.bind:jakarta.xml.bind-api"
        implementation "jakarta.xml.ws:jakarta.xml.ws-api"
        implementation "jakarta.jws:jakarta.jws-api:${jakartaJwsApiVersion}"
        implementation "com.sun.xml.messaging.saaj:saaj-impl"

        compileOnly 'org.projectlombok:lombok'

        testImplementation "se.inera.intyg.refdata:refdata:${refDataVersion}"
        testImplementation "junit:junit"
        testImplementation "org.mockito:mockito-core"
        testImplementation "org.junit.jupiter:junit-jupiter-api"
        testImplementation "org.junit.jupiter:junit-jupiter-params"
        testImplementation "org.mockito:mockito-junit-jupiter"
        testCompileOnly 'org.projectlombok:lombok'
        testRuntimeOnly "org.junit.jupiter:junit-jupiter-engine"
        testRuntimeOnly "org.junit.vintage:junit-vintage-engine"

        annotationProcessor 'org.projectlombok:lombok'
        testAnnotationProcessor 'org.projectlombok:lombok'
    }

    tasks.register('install') {
        description("Publishes artifact to local maven repository.")
        dependsOn(publishMavenWebPublicationToMavenLocal)
    }

    tasks.register('createVersionPropertyFile', VersionPropertyFileTask)

    compileJava { options.encoding = "UTF-8" }
    compileJava.dependsOn processResources
    compileTestJava.dependsOn createVersionPropertyFile
    checkstyleMain.dependsOn createVersionPropertyFile
    test { useJUnitPlatform() }

    repositories {
//        maven {
//            url "http://172.21.0.1:37373/repository/it-public/"
//            allowInsecureProtocol = true
//        }
        mavenLocal()
        maven { url "https://nexus.drift.inera.se/repository/it-public/" }
        mavenCentral {
            content {
                excludeGroupByRegex "se\\.inera.*"
            }
        }
    }

    if (!project.name.contains("-web") && !project.name.contains("-liquibase-runner")) {
        publishing {
            publications {
                mavenWeb(MavenPublication) {
                    from components.java
                }
            }
        }
    }

    clean {
        setDelete(fileTree(project.layout.buildDirectory.get().asFile) {
            exclude("/tmp/.cache/expanded/expanded.lock")
        })
    }

    if (project.hasProperty('codeQuality')) {
        dependencies { spotbugsSlf4j "org.slf4j:slf4j-simple" }
    }
}

tasks.register('tagRelease', TagReleaseTask)

subprojects.collect {subproject -> subproject.name }.each { subprojectName ->
    dependencies { testReportAggregation project(":${subprojectName}") }
}
