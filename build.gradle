ext {
    commonVersion = System.properties['commonVersion'] ?: '0-SNAPSHOT'
    typerVersion = System.properties['typerVersion'] ?: '0-SNAPSHOT'

    springVersion = "4.2.2.RELEASE"
    activeMqVersion = "5.13.4"
    mysqlVersion = "5.1.39"
    h2Version = "1.3.176"
    liquibaseVersion = "3.3.5"
}

allprojects  {
    group = 'se.inera.intyg.intygstjanst'
    version = System.properties['buildVersion'] ?: '0-SNAPSHOT'

    apply plugin: 'maven'
    apply plugin: 'org.ajoberstar.grgit'
}

subprojects {
    apply plugin: 'java'

    sourceCompatibility = 1.8
    targetCompatibility = 1.8

    task createVersionPropertyFile(dependsOn: processResources) {
        def propertyFile = "${buildDir}/resources/main/version.properties"
        def projectVersion = rootProject.version
        def gitCommit = grgit.head().id
        def gitBranch = grgit.branch.getCurrent().getName()
        def buildNumber = System.env.BUILD_NUMBER

        inputs.property("project.version", projectVersion)
        inputs.property("gitCommit", gitCommit)
        inputs.property("gitBranch", gitBranch)
        inputs.property("buildNumber", buildNumber)
        outputs.file(propertyFile)

        doLast {
            ant.touch(file: propertyFile, mkdirs: "true")
            ant.propertyfile(file: propertyFile) {
                entry(key: 'project.version', default: projectVersion)
                entry(key: 'gitCommit', default: gitCommit)
                entry(key: 'gitBranch', default: gitBranch)
                entry(key: 'buildNumber', default: buildNumber)
                entry(key: 'buildTime', default: new Date())
            }
        }
    }

    jar.dependsOn(createVersionPropertyFile)

    task unzipBuildTools(type: Copy) {
        description 'Extracts common-build-tools'
        into "$buildDir/build-tools/"
        from {
            configurations.buildtools.collect { zipTree(it) }
        }
    }

    apply plugin: 'checkstyle'

    checkstyle {
        config = resources.text.fromFile("${buildDir}/build-tools/checkstyle/checkstyle.xml")
        ignoreFailures = false
        showViolations = true
    }

    checkstyleMain.onlyIf { project.hasProperty('codeQuality') }
    checkstyleMain.dependsOn unzipBuildTools
    checkstyleMain.source = "src/main/java"
    checkstyleTest.enabled = false

    apply plugin: 'jacoco'

    jacoco {
        toolVersion = "0.7.6.201602180812"
    }

    test {
        jacoco {
            destinationFile = file("$buildDir/jacoco/test.exec")
        }
    }

    uploadArchives {
        repositories.mavenDeployer {
            pom.whenConfigured {pom ->
                pom.dependencies.findAll { dep -> dep.groupId == 'se.inera.intyg.common' }.each {
                    it.version = findResolvedVersion(project, 'se.inera.intyg.common')
                }
                pom.dependencies.findAll {dep -> dep.groupId == 'se.inera.intyg.intygstyper' }.each {
                    it.version = findResolvedVersion(project, 'se.inera.intyg.intygstyper')
                }
            }
            repository(url: "https://build-inera.nordicmedtest.se/nexus/content/repositories/releases") {
                authentication(userName: System.properties['nexusUsername'], password: System.properties['nexusPassword'])
            }
        }
    }

    install {
        repositories.mavenInstaller {
            pom.whenConfigured {pom ->
                pom.dependencies.findAll {dep -> dep.groupId == 'se.inera.intyg.common' }.each {
                    it.version = findResolvedVersion(project, 'se.inera.intyg.common')
                }
                pom.dependencies.findAll {dep -> dep.groupId == 'se.inera.intyg.intygstyper' }.each {
                    it.version = findResolvedVersion(project, 'se.inera.intyg.intygstyper')
                }
            }
        }
    }

    configurations {
        buildtools
    }

    dependencies {
        testCompile 'junit:junit:4.12'
        testCompile 'org.mockito:mockito-core:1.9.0'
        buildtools "se.inera.intyg.common:common-build-tools:${commonVersion}"
    }

    repositories {
        mavenLocal()
        maven { url "https://build-inera.nordicmedtest.se/nexus/content/repositories/releases/" }
        maven { url "https://build-inera.nordicmedtest.se/nexus/content/repositories/snapshots/" }
        maven { url "http://repo.maven.apache.org/maven2" }
    }
}

String findResolvedVersion(Project project, String groupName) {
    String version
    project.configurations.find {
        it.name == 'compile'
    }.resolvedConfiguration.getFirstLevelModuleDependencies().find {
        if (it.moduleGroup == groupName) {
            version = it.moduleVersion
            return true
        }
        return false
    }
    return version
}

task tagRelease {
    description = 'Tags the current head with the projects version.'
    doLast {
        def grgit = org.ajoberstar.grgit.Grgit.open(creds: new org.ajoberstar.grgit.Credentials(System.properties['githubUser'],
                                                                                                System.properties['githubPassword']))
        grgit.tag.add {
            name = "v" + version
            message = "Release of ${version}"
        }
        grgit.push(tags: true)
    }
}

task testReport(type: TestReport) {
    destinationDir = file("$buildDir/reports/allTests")
    reportOn subprojects*.test // Include the results from the 'test' task in all subprojects
}

apply plugin: "org.sonarqube"

sonarqube {
    properties {
        property "sonar.jacoco.reportPath", "$buildDir/jacoco/test.exec"
        property "sonar.projectName", "Intygstj√§nsten"
        property "sonar.projectKey", "intygstjansten"
        property "sonar.host.url", System.properties['sonarUrl'] ?: "https://build-inera.nordicmedtest.se/sonar"
        property "sonar.test.exclusions", "src/test/**"
        property "sonar.exclusions", [
            "**/stub/**",
            "**/exception/**",
            "**/*Exception*.java"
            ]
    }
}

buildscript {
    dependencies {
        classpath "org.sonarsource.scanner.gradle:sonarqube-gradle-plugin:2.1"
        classpath 'org.ajoberstar:gradle-git:1.5.1'
        classpath 'org.akhikhl.gretty:gretty:+'
    }

    repositories {
        mavenLocal()
        maven { url "https://build-inera.nordicmedtest.se/nexus/content/repositories/releases/" }
        maven { url "https://build-inera.nordicmedtest.se/nexus/content/repositories/snapshots/" }
        maven { url "https://plugins.gradle.org/m2/" }
    }
}
